Reclarify requirements

    functional 
        be able to input their data to check their driving records
        also check other "rules" like violations, and etc
        be returned with report and a level of risk possibly
        high reliability as users should be able to check for their records
        backend should be able to filter the users from the rules
        be able to modify rules if needed
        RELIABILITY since users will probably use it like once every few months or something

    non functional requirements
        RELIABILITY(measures intended function for a specific interval without
        failure) or AVAILIBILITY (measures ability of piece to operated if needed)
        SCALIBILITY
        
        DATA STORAGE
            HOW BIG STORAGE IS NEEDED, etc
            
    Backend stuff (sql or no sql)
        Go in to schema


            id, (key, data types)
            user_id , (foreign key, int)

            USER table, user id
            name, sex, address, 94132
            license number, class, expiration date, RULES_ID

            rules table
            dui, fines, traffic violations, criminal records

            VIOLATION tables  INTs
            USER_ID , duis , fines, suspensions BOOLEAN, traffic violations 

            user_result
            user_id, company_id, RULES, result - approved or not, LAST_CHECKEd - date
            user_id, company_id, 

    SYSTEM APIs
        /update_rules
            params(name, threshold)
        /check_user
            params(name, address, sex, birthdate, license #, rules)
            RETURNS(RESULT for users with rules)
        /check_records
            params(name, companyId)
            RETURNS(RESULT WITH DIFFERENT RULES IF AVAIL)

    HIGH LEVLE ARCHITECTURE
        client goes on 

        web browser/phone app
        
        goes to backend server
            writes to 
                have a database, usually postgresql/mysql for relational database
            reads to
                
                multiple servers for the DB, multiple which is redundant but it helps
                securee the reliaiblity just in case anything gets lost if a server
                is down.

                have a load balancer between those in order to help spread traffic
                acrss a cluster of servers to improve responsivenes and AVAILIBILITY
                of the DB's. so itll stop sending traffic to one server if its busy
                or not responding and sends to other

    DATA partition
        Horizontal Partitioning is also known as Data Sharding.
        The key problem with this approach is that if the value whose range is used for 
        Partitioning isnâ€™t chosen carefully, then the partitioning scheme will lead to unbalanced servers.
        horizontal - put different rows into different tables,
            ex) one table that stores zipcodes with <40000
                other  table with zipcodes > 40000

        vertical - divide data to store datas related to sepcific features in own server
            